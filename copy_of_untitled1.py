# -*- coding: utf-8 -*-
"""Copy of Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szg3_6kxvbM3kVyNnWvUc2_wjaUL2xYo
"""

import pandas as pd
import numpy as np

data = pd.read_csv('Titanic-Dataset.csv')

data.head()

data.isnull().sum()

impute_value=data["Age"].median()
data["Age"]=data["Age"].fillna(impute_value)
print(data["Age"])

data.describe()

data.shape

data.info()

data=data.drop(columns="Cabin")

data.columns

data.isnull().sum()

data["Embarked"].mode()

val=data["Embarked"].mode()[0]
data["Embarked"]=data["Embarked"].fillna(val)

data.isnull().sum()

data["Survived"].value_counts()

import plotly.express as px
fig = px.histogram(data, x='Survived', color='Survived', barmode='group', category_orders={"Survived": [0, 1]})
fig.show()

import plotly.express as px
import pandas as pd
data = pd.read_csv('Titanic-Dataset.csv')
fig1 = px.histogram(data, x='Sex', color='Sex', barmode='group', category_orders={"Sex": [0, 1]})
fig1.show()

import pandas as pd
data = pd.read_csv('Titanic-Dataset.csv')
fig = px.histogram(data, x='Sex', color='Survived', barmode='group', category_orders={"Sex": ["male", "female"]})
fig.show()

fig = px.histogram(data, x='Pclass', color='Pclass',category_orders={"Pclass": sorted(data['Pclass'].unique())})
fig.show()

fig = px.histogram(data, x='Embarked', color='Embarked')
fig.show()

import pandas as pd
import plotly.figure_factory as ff
df = pd.DataFrame(data)
cleaned_data = df['Age'].replace([np.inf, -np.inf], np.nan).dropna()
data = pd.read_csv('Titanic-Dataset.csv')

fig = ff.create_distplot([cleaned_data], ['Age'], bin_size=5)
fig.show()

fig = ff.create_distplot([data["Fare"]], ['Fare'], bin_size=50)
fig.show()

import plotly.graph_objects as go
numeric_data=data.select_dtypes(include=[np.number])
corr=numeric_data.corr()
fig = go.Figure(data=go.Heatmap(
    z=corr.values,
    x=corr.columns,
    y=corr.index,
    colorscale='RdBu',
    colorbar=dict(
        title='Correlation'  # Specify the title for the colorbar
    )
))
fig.update_layout(title="Corelation HeatMap",width=800,height=600,xaxis_title="Features",yaxis_title="Features",yaxis_autorange='reversed')
fig.show()

data.columns

data["Sex"].value_counts()

data["Embarked"].value_counts()

from sklearn.preprocessing import LabelEncoder
cols=["Sex","Embarked"]
le=LabelEncoder()
for col in cols:
    data[col]=le.fit_transform(data[col])
data.head()

X=data.drop(columns=['PassengerId','Survived'],axis=1)
Y=data["Survived"]

X

Y

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

model=LogisticRegression()
data.info()

data['Age'] = data['Age'].fillna(0).astype(int)
data['Fare'] = data['Fare'].fillna(0).astype(int)
data.astype({"Age":'int',"Fare":'int'}).dtypes

model=LogisticRegression()

X_train = X_train.apply(pd.to_numeric, errors='coerce')
X_test = X_test.apply(pd.to_numeric, errors='coerce')

X_train = X_train.fillna(0)
X_test = X_test.fillna(0)

model.fit(X_train, Y_train)

X_train_Prediction=model.predict(X_train)

print(X_train_Prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_Prediction)
print('Accuracy_score_of_training_data : ', training_data_accuracy)

# Remove the duplicate line below
# training_data_accuracy = accuracy_score(Y_train, X_train_Prediction)
# print('Accuracy_score_of_training_data : ', training_data_accuracy)

X_test_prediction = model.predict(X_test)

print(X_test_prediction)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy_score_of_test data : ', test_data_accuracy)

from sklearn.linear_model import LogisticRegressionCV
model_cv = LogisticRegressionCV(Cs=10, cv=5)

model_cv.fit(X_train, Y_train)

from sklearn.model_selection import cross_val_score
model = LogisticRegression(C=10)
scores = cross_val_score(model, X_train, Y_train, cv=4)
scores

